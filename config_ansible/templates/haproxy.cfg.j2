#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend k8s-api
    # bind {{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:443
    # bind 127.0.0.1:443
    bind :{{ kubernetes_api_port }}
    mode tcp
    option tcplog
    timeout client 300000
    default_backend k8s-api

frontend k8s-http-ingress
    bind :80
    mode tcp
    option tcplog
    timeout client 300000
    default_backend k8s-http-ingress

frontend k8s-https-ingress
    bind :443
    mode tcp
    option tcplog
    timeout client 300000
    default_backend k8s-https-ingress

backend k8s-api
    mode tcp
    option tcplog
    option tcp-check
    timeout server 300000
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    {% for host in k8sMasters %}
server {{ hostvars[host].ansible_do_host }} {{ hostvars[host].ansible_internal_private_ip }}:{{ kubernetes_api_port }} check
    {% endfor %}

backend k8s-http-ingress
    mode tcp
    option tcplog
    option tcp-check
    timeout server 300000
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    {% for host in k8sWorkers %}
server {{ hostvars[host].ansible_do_host }} {{ hostvars[host].ansible_internal_private_ip }}:80 check
    {% endfor %}

backend k8s-https-ingress
    mode tcp
    option tcplog
    option tcp-check
    timeout server 300000
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    {% for host in k8sWorkers %}
server {{ hostvars[host].ansible_do_host }} {{ hostvars[host].ansible_internal_private_ip }}:443 check
    {% endfor %}